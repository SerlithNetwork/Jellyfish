From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Biquaternions <biquaternions@serlith.net>
Date: Tue, 29 Apr 2025 00:10:46 -0500
Subject: [PATCH] Jellyfish Toggle Hopper Ticks


diff --git a/net/minecraft/world/entity/vehicle/MinecartHopper.java b/net/minecraft/world/entity/vehicle/MinecartHopper.java
index a56d9cdeb6589a053ffaaf2cd599a98ae0a0989a..1f196186f0842eb41860b0e2b4da31d4403a1c39 100644
--- a/net/minecraft/world/entity/vehicle/MinecartHopper.java
+++ b/net/minecraft/world/entity/vehicle/MinecartHopper.java
@@ -101,6 +101,7 @@ public class MinecartHopper extends AbstractMinecartContainer implements Hopper
     }
 
     public boolean suckInItems() {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return false; // Jellyfish - Toggle hopper ticks
         if (HopperBlockEntity.suckInItems(this.level(), this)) {
             this.immunize(); // Paper
             return true;
diff --git a/net/minecraft/world/level/block/HopperBlock.java b/net/minecraft/world/level/block/HopperBlock.java
index 46a27f60ba407dacdac190b5e292ab3f1db5a078..04ea9da999ce12a496e491db94410617d53991bb 100644
--- a/net/minecraft/world/level/block/HopperBlock.java
+++ b/net/minecraft/world/level/block/HopperBlock.java
@@ -94,6 +94,7 @@ public class HopperBlock extends BaseEntityBlock {
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState state, BlockEntityType<T> blockEntityType) {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return null; // Jellyfish - Toggle hopper ticks
         return level.isClientSide ? null : createTickerHelper(blockEntityType, BlockEntityType.HOPPER, HopperBlockEntity::pushItemsTick);
     }
 
diff --git a/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 15d4f60942c0cc612c1468b4c0fda886867a67cb..a6b0dcbb6e5b60fa247bad86b9d85f460a63a8ed 100644
--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -128,6 +128,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     public static void pushItemsTick(Level level, BlockPos pos, BlockState state, HopperBlockEntity blockEntity) {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return; // Jellyfish - Toggle hopper ticks
         blockEntity.cooldownTime--;
         blockEntity.tickedGameTime = level.getGameTime();
         if (!blockEntity.isOnCooldown()) {
@@ -181,6 +182,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     // Paper end - Perf: Optimize Hoppers
 
     private static boolean tryMoveItems(Level level, BlockPos pos, BlockState state, HopperBlockEntity blockEntity, BooleanSupplier validator) {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return false; // Jellyfish - Toggle hopper ticks
         if (level.isClientSide) {
             return false;
         } else {
@@ -207,6 +209,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private boolean inventoryFull() {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return true; // Jellyfish - Toggle hopper ticks
         for (ItemStack itemStack : this.items) {
             if (itemStack.isEmpty() || itemStack.getCount() != itemStack.getMaxStackSize()) {
                 return false;
@@ -222,6 +225,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     private static boolean skipPushModeEventFire;
 
     private static boolean hopperPush(final Level level, final Container destination, final Direction direction, final HopperBlockEntity hopper) {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return false; // Jellyfish - Toggle hopper ticks
         skipPushModeEventFire = skipHopperEvents;
         boolean foundItem = false;
         for (int i = 0; i < hopper.getContainerSize(); ++i) {
@@ -267,6 +271,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean hopperPull(final Level level, final Hopper hopper, final Container container, ItemStack origItemStack, final int i) {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return false; // Jellyfish - Toggle hopper ticks
         ItemStack movedItem = origItemStack;
         final int originalItemCount = origItemStack.getCount();
         final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
@@ -417,6 +422,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     // Paper end - Perf: Optimize Hoppers
 
     private static boolean ejectItems(Level level, BlockPos pos, HopperBlockEntity blockEntity) {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return false; // Jellyfish - Toggle hopper ticks
         Container attachedContainer = getAttachedContainer(level, pos, blockEntity);
         if (attachedContainer == null) {
             return false;
@@ -528,6 +534,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     public static boolean suckInItems(Level level, Hopper hopper) {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return false; // Jellyfish - Toggle hopper ticks
         BlockPos blockPos = BlockPos.containing(hopper.getLevelX(), hopper.getLevelY() + 1.0, hopper.getLevelZ());
         BlockState blockState = level.getBlockState(blockPos);
         Container sourceContainer = getSourceContainer(level, hopper, blockPos, blockState);
@@ -557,6 +564,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean tryTakeInItemFromSlot(Hopper hopper, Container container, int slot, Direction direction, Level level) { // Spigot
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return false; // Jellyfish - Toggle hopper ticks
         ItemStack item = container.getItem(slot);
         if (!item.isEmpty() && canTakeItemFromContainer(hopper, container, item, slot, direction)) {
             // Paper start - Perf: Optimize Hoppers
@@ -671,6 +679,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     private static ItemStack tryMoveInItem(@Nullable Container source, Container destination, ItemStack stack, int slot, @Nullable Direction direction) {
         ItemStack item = destination.getItem(slot);
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return item; // Jellyfish - Toggle hopper ticks
         if (canPlaceItemInContainer(destination, stack, slot, direction)) {
             boolean flag = false;
             boolean isEmpty = destination.isEmpty();
@@ -863,6 +872,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     public static void entityInside(Level level, BlockPos pos, BlockState state, Entity entity, HopperBlockEntity blockEntity) {
+        if (net.serlith.jellyfish.JellyfishConfig.TICKING.BLOCKS.PREVENT_HOPPER_TICKS) return; // Jellyfish - Toggle hopper ticks
         if (entity instanceof ItemEntity itemEntity
             && !itemEntity.getItem().isEmpty()
             && entity.getBoundingBox().move(-pos.getX(), -pos.getY(), -pos.getZ()).intersects(blockEntity.getSuckAabb())) {
